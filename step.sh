#!/bin/bash
set -ex

# echo "This is the value specified for the input 'example_step_input': ${example_step_input}"

#
# --- Export Environment Variables for other Steps:
# You can export Environment Variables for other Steps with
#  envman, which is automatically installed by `bitrise setup`.
# A very simple example:
# envman add --key EXAMPLE_STEP_OUTPUT --value 'the value you want to share'
# Envman can handle piped inputs, which is useful if the text you want to
# share is complex and you don't want to deal with proper bash escaping:
#  cat file_with_complex_input | envman add --KEY EXAMPLE_STEP_OUTPUT
# You can find more usage examples on envman's GitHub page
#  at: https://github.com/bitrise-io/envman

#
# --- Exit codes:
# The exit code of your Step is very important. If you return
#  with a 0 exit code `bitrise` will register your Step as "successful".
# Any non zero exit code will be registered as "failed" by `bitrise`.
MESSAGE="üö®‚ö†Ô∏è *$BITRISE_APP_TITLE*: –°–±–æ—Ä–∫–∞ $BITRISE_BUILD_NUMBER –æ—Ç–≤–∞–ª–∏–ª–∞—Å—å üóø\n–°—Å—ã–ª–∫–∞ (Bitrise): $BITRISE_APP_URL"
if [ ! -z "$BITRISE_GIT_MESSAGE" -a "$BITRISE_GIT_MESSAGE" != " " ] ; then MESSAGE+="\n–°–æ–æ–±—â–µ–Ω–∏–µ: $BITRISE_GIT_MESSAGE" ; fi
MESSAGE+="\n\n $custom_message"

if [ $BITRISE_BUILD_STATUS -eq 0 ] ; then 
	MESSAGE="‚úÖ <b>$BITRISE_APP_TITLE</b>: –°–±–æ—Ä–∫–∞ $BITRISE_BUILD_NUMBER —É—Å–ø–µ—à–Ω–∞! "
	NUM=$(shuf -i 0-18 -n 1)
	if [ $NUM -eq 0 ] ; then MESSAGE+="–ë–ª–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ üèÖ" ; fi
	if [ $NUM -eq 1 ] ; then MESSAGE+="–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ üèÜ" ; fi
	if [ $NUM -eq 2 ] ; then MESSAGE+="–ò–∑—É–º–∏—Ç–µ–ª—å–Ω–æ üçæ" ; fi
	if [ $NUM -eq 3 ] ; then MESSAGE+="–í–æ–ª—à–µ–±–Ω–æ ü™Ñ" ; fi
	if [ $NUM -eq 4 ] ; then MESSAGE+="–ß—É–¥–Ω–æ üí´" ; fi
	if [ $NUM -eq 5 ] ; then MESSAGE+="–ü–æ—Ç—Ä—è—Å–∞—é—â–µ üî•" ; fi 
	if [ $NUM -eq 6 ] ; then MESSAGE+="–®–∏–∫–∞—Ä–Ω–æ üëë" ; fi 
	if [ $NUM -eq 7 ] ; then MESSAGE+="–î–∏–≤–Ω–æ ü§å" ; fi 
	if [ $NUM -eq 8 ] ; then MESSAGE+="–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ ü§ù" ; fi 
	if [ $NUM -eq 9 ] ; then MESSAGE+="–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ ü§©" ; fi 
	if [ $NUM -eq 10 ] ; then MESSAGE+="–ë–ª–µ—Å—Ç—è—â–µ üéÜ" ; fi
	if [ $NUM -eq 11 ] ; then MESSAGE+="üÖ∞Ô∏èüÖ±Ô∏èüÖæÔ∏èüÖ±Ô∏èüÖ∞Ô∏è" ; fi 
	if [ $NUM -eq 12 ] ; then MESSAGE+="–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ üéá" ; fi 
	if [ $NUM -eq 13 ] ; then MESSAGE+="–ö—Ä–∞—Å–∏–≤–æ üå†" ; fi
	if [ $NUM -eq 14 ] ; then MESSAGE+="–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ üåü" ; fi 
	if [ $NUM -eq 15 ] ; then MESSAGE+="–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ ‚ú®" ; fi 
	if [ $NUM -eq 16 ] ; then MESSAGE+="–ú–æ—â–Ω–æ ü¶æ" ; fi
	if [ $NUM -eq 17 ] ; then MESSAGE+="–ù–æ—Ä–º." ; fi
	if [ $NUM -eq 18 ] ; then MESSAGE+="–ü–æ–π–¥–µ—Ç." ; fi
	if [ ! -z "$BITRISE_GIT_MESSAGE" -a "$BITRISE_GIT_MESSAGE" != " " ] ; then MESSAGE+="\n–°–æ–æ–±—â–µ–Ω–∏–µ: $BITRISE_GIT_MESSAGE" ; fi
fi
if [ ! -z "$download_url" -a "$download_url" != " " ] ; then MESSAGE+="\n\n–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ‚¨áÔ∏è: $download_url" ; fi
MESSAGE+="\n\n$custom_message" 

payload="{ \"chat_id\": \"'${telegram_chat_id}'\", \"text\":\"$MESSAGE\", \"parse_mode\": \"HTML\" }"

RESULT=$(curl -X POST https://api.telegram.org/bot${telegram_bot_token}/sendMessage \
-H "Content-Type: application/json" \
-d @- <<EOF
{
    "chat_id":"${telegram_chat_id}", 
    "text":"$MESSAGE",
    "parse_mode":"HTML"
}
EOF)

# echo "$payload"
# echo "$BITRISE_GIT_MESSAGE"
# echo "$MESSAGE"
# echo "$RESULT"

